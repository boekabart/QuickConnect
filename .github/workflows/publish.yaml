name: publish
on:
  push:
    branches: [master, develop, release]
env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
  # to allow set environment variables
jobs:
  build:
    name: Build
    runs-on: [self-hosted, linux, net70, pwsh]    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: dotnet restore
      - name: Install tool dependencies
        run: dotnet tool restore
      - name: Calculating version
        shell: pwsh
        run: | 
          $version = dotnet tool run git-flow-version --branch $ENV:GITHUB_REF_NAME | ConvertFrom-Json
          Write-Host "calculated version:"
          $version | Format-List
          
          $SemVer = $version.SemVer
          $FullSemVer = $version.FullSemVer
          $AssemblyVersion = $version.AssemblyVersion
          
          echo "::set-env name=SemVer::$SemVer"
          echo "::set-env name=FullSemVer::$FullSemVer"          
          echo "::set-env name=AssemblyVersion::$AssemblyVersion"   
      - name: Create assembly info
        shell: pwsh
        run: |
          $assemblyInfoContent = @"
          // <auto-generated/>
          using System.Reflection;
          using System.Runtime.InteropServices;

          [assembly: AssemblyVersionAttribute("$($env:AssemblyVersion)")]
          [assembly: AssemblyFileVersionAttribute("$($env:AssemblyVersion)")]
          [assembly: AssemblyInformationalVersionAttribute("$($env:FullSemVer)")]
          "@
          if (-not (Test-Path "built")) {
            New-Item -ItemType Directory "built"
          }
          $assemblyInfoContent | Out-File -Encoding utf8 (Join-Path "built" "SharedAssemblyInfo.cs") -Force               
      - name: Build
        run: dotnet build --configuration Release --no-restore src/Tring
      - name: Pack
        run: dotnet --no-build pack --verbosity normal --configuration Release src/Tring -p:PackageVersion=$FullSemVer
      - name: Pushing NuGet package
        run: dotnet nuget push "**/*.nupkg" --api-key ${{secrets.HTI_NUGET_APIKEY}} --no-symbols --source https://api.nuget.org/v3/index.json
#  test:
#    name: Test #/ ${{ matrix.os }} / ${{ matrix.arch }} / ${{ matrix.tfm }}
#	runs-on: [self-hosted, linux, net60, pwsh] 
#    strategy:
#      matrix:
#        arch: [ amd64 ]
#        os: [windows-2019, macos-10.15]
#        tfm: [ net472, netcoreapp3.1, net5.0, net6.0 ]
#        exclude:
#          - os: macos-10.15
#            tfm: net472
#      fail-fast: false
#	steps:
  test-linux:
    name: Test #/ ${{ matrix.distro }} / ${{ matrix.arch }} / ${{ matrix.tfm }}
    runs-on: [self-hosted, linux, net70, pwsh]    
#    strategy:
#      matrix:
#        arch: [ amd64 ]
#        # arch: [ amd64, arm64 ]
#        distro: [ alpine.3.12, alpine.3.13, alpine.3.14, centos.7, centos.8, debian.9, debian.10, debian.11, fedora.33, ubuntu.18.04, ubuntu.20.04 ]
#        sdk:  [ '6.0', '5.0', '3.1' ]
#        exclude:
#          - arch: arm64
#            distro: alpine.3.12
#          - arch: arm64
#            distro: alpine.3.13
#            sdk: '3.1'
#          - arch: arm64
#            distro: alpine.3.14
#            sdk: '3.1'
#          - arch: arm64
#            distro: centos.7
#        include:
#          - sdk: '6.0'
#            tfm: net6.0
#          - sdk: '5.0'
#            tfm: net5.0
#          - sdk: '3.1'
#            tfm: netcoreapp3.1
#      fail-fast: false
    steps:	
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install dependencies
        run: dotnet restore
      - name: Run Test
        run: dotnet test /p:CollectCoverage=true /p:Exclude=[xunit.*]* /p:CoverletOutput=../../test/Tring.xml --no-restore --verbosity normal --configuration Release test/TringTests
      - name: Publish coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./test/Tring.xml
