# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macos-latest'
    windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)

trigger:
  branches:
    include:
    - develop
    - feature/*
    - hotfix/*
    - release/*
    - master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- task: PowerShell@2
  condition: and(eq(variables.imageName, 'windows-latest'),ne(variables['Build.SourceBranchName'], 'merge'))
  inputs:
    targetType: inline
    pwsh: true
    script: 'choco install codecov'
  displayName: Install codecov

- task: DotNetCoreInstaller@0
  inputs:
    packageType: 'sdk'
    version: '2.2.401'
  displayName: Install .NET Core 2 latest
  env:
   DOTNET_CLI_TELEMETRY_OPTOUT: false
   DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: true
    script: 'dotnet tool install --global coverlet.console'
  env:
   DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  displayName: Install coverlet

- task: PowerShell@2
  condition: ne(variables['Build.SourceBranchName'], 'merge')
  inputs:
    targetType: inline
    pwsh: true
    script: 'dotnet tool install --global git-flow-version'
  env:
   DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  displayName: Install git-flow-version

- task: NuGetToolInstaller@1
  inputs:
    versionSpec: '5.1.0'
    checkLatest: true
  env:
   DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  displayName: Install NuGet

- task: InstallSSHKey@0
  condition: and(eq(variables.imageName, 'windows-latest'),contains(variables['Build.SourceBranch'],'/master'))
  inputs:
    knownHostsEntry: 'github.com, ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
    sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDAWe5wEt/yz/12S0+qX9pHi+7eZiO+Mo0z7kekej1i8GRVM8vjBblDz3PxDa4CxBJxN1sHaiVQP2Y8wQt5DK3gtDSrfQmtUQuWVrdXzcrgkNf74qNb3gATg33yLER/Ia/RYd7K4gL7JooITrJKNkO1JUm3oQLk9a/9aR9y5UXcqLYiWdrpJ7RfRrMDiPcFKXjb7w433Lv/DfA0LrylqD/UZHU5WlgEPURL3YyE65fJxYh9du30kFS/dAXZUFXszUa/Hn0ssQItrrKfbf7l/jRsT/h0RxEncg8l6H7mLR3n55FVWZNOTQgaat+VQxXV8ZwR4W7eaq/KlNIEvFdyFcAVEkOpj/uh8FaUSFCNptKTM7EOc/X6NMDe/S2zn4RSEKg38aWTivS6gVUdFtGVeLse/ghd9dQ1zHRsV/0kSNIbvZEU0QUUdia4UNRrcedO4ve6sxfHtdc7y/4dc6WepnPVyzRx+VHkQgVNcqucg//4J1jIGr9JOt2Y+wz+A/mEjJ6SMGR3nX0YXeuuEzAXD9nGy4M4gcy+I71pOrGL8v5Zs2LNE0yO7rUGca87X7d8j8DKE2GYn1SPQCgofcsgIX53ejad8YW8h0hXnMi4VeeVzqmLQxGskADwE36lhovJAFV3kCL/6czHBrxOZ1pMOC7zgU3sf34jObay3JFLa28LBw=='
    sshKeySecureFile: 'Tring_githubKey'
  displayName: Install sshKey for documentation publishing
  
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    feedsToUse: 'select'
  displayName: Dotnet Restore

- task: PowerShell@2
  condition: and(eq(variables.imageName, 'windows-latest'),ne(variables['Build.SourceBranchName'], 'merge'))
  inputs:
    targetType: inline
    pwsh: true
    script: 'New-Item -ItemType Directory "built"'
  displayName: Create built folder

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    arguments: '/p:CollectCoverage=true /p:Exclude=[xunit.*]* /p:CoverletOutput=''../../built/Tring.xml'' /p:CoverletOutputFormat=cobertura'
    testRunTitle: 'Running tests'
  displayName: Running Tests

- task: PowerShell@2
  condition: and(eq(variables.imageName, 'windows-latest'),ne(variables['Build.SourceBranchName'], 'merge'))
  inputs:
    targetType: inline
    pwsh: true
    script: 'codecov -f "./built/Tring.xml" -t $env:CodecovToken'
  env:
    CodecovToken: $(CodecovToken)
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  displayName: Publish code coverage

- task: PowerShell@2
  condition: ne(variables['Build.SourceBranchName'], 'merge')
  displayName: Calculating version
  inputs:
    targetType: 'inline'
    script: |
      $version= git-flow-version --branch $env:BUILD_SOURCEBRANCHNAME | ConvertFrom-Json
      Write-Host "calculated version:"
      $version | Format-List
      echo "##vso[task.setvariable variable=SemVer]$($version.SemVer)"
      echo "##vso[task.setvariable variable=FullSemVer]$($version.FullSemVer)"
      echo "##vso[task.setvariable variable=AssemblyVersion]$($version.AssemblyVersion)"

- task: PowerShell@2
  condition: and(eq(variables.imageName, 'windows-latest'),ne(variables['Build.SourceBranchName'], 'merge'))
  displayName: Create assembly info
  inputs:
    targetType: 'inline'
    script: |
      $assemblyInfoContent = @"
      // <auto-generated/>
      using System.Reflection;
      using System.Runtime.InteropServices;

      [assembly: AssemblyVersionAttribute("$($env:AssemblyVersion)")]
      [assembly: AssemblyFileVersionAttribute("$($env:AssemblyVersion)")]
      [assembly: AssemblyInformationalVersionAttribute("$($env:FullSemVer)")]
      "@
      $assemblyInfoContent | Out-File -Encoding utf8 (Join-Path "built" "SharedAssemblyInfo.cs") -Force
  env:
    FullSemVer: $(FullSemVer)
    SemVer: $(SemVer)
    AssemblyVersion: $(AssemblyVersion)

- task: DotNetCoreCLI@2
  condition: and(eq(variables.imageName, 'windows-latest'),ne(variables['Build.SourceBranchName'], 'merge'))
  inputs:
    command: 'pack'
    packagesToPack: './src/*/*.csproj'
    packDirectory: './built'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'FullSemVer'
  displayName: Creating packages dotnet task

- task: PowerShell@2
  condition: and(eq(variables.imageName, 'ubuntu-latest'),ne(variables['Build.SourceBranchName'], 'merge'))
  displayName: Tagging build
  inputs:
    targetType: 'inline'
    script: |
      if (Test-Path "./.git/refs/tags/$($env:SemVer)") {
      Write-Host "Tag: $($env:SemVer) is already pressent in the repository!"
      }
      else
      {
      git remote set-url origin git@github.com:hightechict/Tring.git
      git tag $env:SemVer
      git push --verbose origin $env:SemVer
      }
    errorActionPreference: 'continue'
  env:
    SemVer: $(SemVer)
